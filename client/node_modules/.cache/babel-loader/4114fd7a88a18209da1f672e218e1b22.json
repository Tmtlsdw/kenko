{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { auth, createUserProfileDocument, getCurrentUser, googleProvider } from \"../../firebase/firebase.utils.js\";\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from \"./user.actions.js\";\nimport UserActionTypes from \"./user.types.js\";\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfileDocument(user, {\n      displayName\n    });\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onCheckUserSession), call(onGoogleSignInStart), call(onEmailSignInStart), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/tmtlsdw/Desktop/Tmtlsdw/Projects/Kenko/kenko/client/src/redux/user/user.sagas.js"],"names":["all","call","put","takeLatest","auth","createUserProfileDocument","getCurrentUser","googleProvider","signInFailure","signInSuccess","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","UserActionTypes","signUp","payload","email","password","displayName","user","createUserWithEmailAndPassword","additionalData","error","signInAfterSignUp","getSnapshotFromUserAuth","isUserAuthenticated","userAuth","userRef","userSnapshot","get","id","data","signInWithEmail","signInWithEmailAndPassword","signInWithGoogle","signInWithPopup","signOut","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","onEmailSignInStart","EMAIL_SIGN_IN_START","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onSignOutStart","SIGN_OUT_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  auth,\n  createUserProfileDocument,\n  getCurrentUser,\n  googleProvider,\n} from \"../../firebase/firebase.utils.js\";\nimport {\n  signInFailure,\n  signInSuccess,\n  signOutFailure,\n  signOutSuccess,\n  signUpFailure,\n  signUpSuccess,\n} from \"./user.actions.js\";\nimport UserActionTypes from \"./user.types.js\";\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n  try {\n    const {user} = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfileDocument(user, { displayName })\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(\n      createUserProfileDocument,\n      userAuth,\n      additionalData\n    );\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onCheckUserSession),\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess),\n  ]);\n}"]},"metadata":{},"sourceType":"module"}